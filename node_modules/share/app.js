var connect = require('connect'),
    sharejs = require('share').server;

var server = connect(
      connect.logger(),
      connect.static(__dirname + '/public')
    );
var options = {db: {type: 'none'}}; // See docs for options. {type: 'redis'} to enable persistance.

// Attach the sharejs REST and Socket.io interfaces to the server
sharejs.attach(server, options);

server.listen(8080, function(){
    console.log('Server running at http://127.0.0.1:8000/');
});

//socket communocation::
var nameArray = new Array();
var count=0;
var io = require('socket.io').listen(server);
io.sockets.on('connection',function (socket) {
	//	socket.emit('message',{msg:'Hello world'});
		/*
		socket.on('set nickname', function (name) {
			socket.set('nickname', name, function () {
				socket.emit('ready');
				});
			});*/
		socket.on('message', function (data) {
			
			console.log('users connected:');

			//set nickname
			socket.set('nickname',data.user,function() {
				socket.emit('ready');
				});

			nameArray[count++] = data.user;
			//display users::
			for(var i=0 ; i<count ; ++i) {
			   console.log(nameArray[i]);
			}
		//	console.log(data.user);
			socket.emit('sendall',{msg : nameArray});
			socket.broadcast.emit('sendall',{msg : nameArray});
			});

		socket.on('disconnect',function() {
				var disname;
				socket.get('nickname',function(err,name){
					disname = name;
					});
				console.log("User disconnect " + disname);
				
				var temp = new Array();
				var c=0;
				for(var i=0 ; i<count ; ++i) {
				   if(disname !==nameArray[i]) {
				   //   console.log(disname+" not equal to "+nameArray[i]);
				      temp[c++] = nameArray[i];
				  //  nameArray = nameArray.splice(i+1,1);
				   }
				}
				   count = c;
				   nameArray = temp;
	                           socket.emit('sendall',{msg : nameArray});
				   socket.broadcast.emit('sendall',{msg : nameArray});
			
		   		   //io.sockets.emit('sendall',{msg:nameArray});
				   //socket.emit('message',{msg : nameArray});

				//   mysend();
				
				});
	//	function mysend() {
	//	   socket.emit('sendall',{msg : nameArray});
	//	   console.log("below socket.emit");
	//	}
		});
